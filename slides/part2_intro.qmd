---
title: "Part 2: Quarto Introduction"
pagetitle: "Part 2: Quarto Introduction"
subtitle: "OCTRI-BERD Workshop July 2025"
author: "Jessica Minnier, Meike Niederhausen"
institute: "OHSU-PSU School of Public Health"
date: "7/17/25"
format: 
  revealjs:
      incremental: false
      scrollable: true
      chalkboard: true
      theme: [../sky_modified.scss]
      width:  1050 #default 1050
      height: 700 #default 700
      slide-number: true
      html-math-method: mathjax
  # html:
  #   link-external-newwindow: true
  #   toc: true
bibliography: ../references.bib
execute:
  echo: true
  freeze: auto  # re-render only when source changes
# editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: "setup" 
#| include: false
#| message: false
#| warning: false

library(tidyverse)    
library(gt)
library(palmerpenguins)

# terminal: for icons
# quarto install extension quarto-ext/fontawesome

# set ggplot theme for slides 
theme_set(theme_bw(base_size = 22))
# theme_update(text = element_text(size=16))  # set global text size for ggplots

```


# Basic Quarto example

![[Artwork from "Hello, Quarto" keynote by Julia Lowndes and Mine Çetinkaya-Rundel, presented at RStudio Conference 2022. Illustrated by Allison Horst.](https://allisonhorst.com/cetinkaya-rundel-lowndes-quarto-keynote)](../images/horst_quarto_moon_penguins.png){fig-align="center"}

## 1. Create a Quarto file (`.qmd`)

**Two options:**

1.  click on File $\rightarrow$ New File $\rightarrow$ Quarto Document...$\rightarrow$ OK,
2.  or in upper left corner of RStudio click on ![](../images/green_plus_create_file.png){width="70"} $\rightarrow$ ![](../images/select_quarto_option.png){width="250"}

::: columns
::: {.column width="50%"}
**Pop-up window selections:**

-   Enter a title and your name
-   Select `HTML` output format (default)
-   Engine: select `Knitr`
-   Editor: Select `Use visual markdown editor`
-   Click `Create`
:::

::: {.column width="50%"}
![](../images/01_qmd_screenshot_popup.png){width=90%}
:::
:::

## 2. Create a Quarto file (`.qmd`)

-   After clicking on `Create`, you should then see the following in your editor window:

![](../images/01_qmd_screenshot.png){fig-align="center"}

## 3. Save the Quarto file (`.qmd`)

-   **Save the file** by
    -   selecting `File -> Save`,
    -   or clicking on ![](../images/01_Script_Save.png){width="33" height="24"} (towards the left above the scripting window),
    -   or keyboard shortcut
        -   PC: *Ctrl + s*
        -   Mac: *Command + s*
-   You will need to specify
    -   a **filename** to save the file as
        -   ALWAYS use **.qmd** as the filename extension for Quarto files
    -   the **folder** to save the file in

## 4. Create (render) html file

We create the html file by **rendering** the .qmd file.

__Two options:__

::: {.columns}
                                        
::: {.column width="49%"}
1.  Click on the Render icon ![](../images/render_icon.png) at the top of the editor window,
:::

::: {.column width="2%"}

:::
                                          
::: {.column width="49%"}
2.  Or use keyboard shortcuts
    -   Mac: *Command+Shift+K*
    -   PC: *Ctrl+Shift+K*
:::
                                          
:::

-   A new window will open with the html output.
-   You will now see both .qmd and .html files in the folder where you saved the .qmd file.

::: callout-note
-   The template .qmd file that RStudio creates will render to an html file by default.
-   The output format can be changed to create a Word doc, pdf, slides, etc.
:::

## .qmd file vs. its html output

::: columns
::: {.column width="50%"}
.qmd file ![](../images/01_qmd_screenshot.png){fig-align="center"}
:::

::: {.column width="50%"}
html output\
![](../images/default_quarto_html.png){fig-align="center"}
:::
:::

# Download .qmd file with code from slides



# 3 types of Quarto content: text

1. [*Text*, lists, images, tables, links]{style="color:darkorange"}
2. Code chunks
3. YAML metadata 

![[Illustration by Alison Hill and Allison Horst, for RStudio.](https://allisonhorst.com/horst-hill-collaborations)](../images/horst_hedgehog_text_code.png){fig-align="center"}

## Formatting text  

* __bold__, _italics_, super^scripts^ & sub~scripts~, ~~strikethrough~~, `verbatim`, etc. \
\


* Text is formatted through a markup language called `Markdown` ([Wikipedia](https://en.wikipedia.org/wiki/Markdown){target="_blank"})
    * Other markup languages include html (webapges) and LaTeX (math)
    * All text formatting is specified via *code*
    * "Markdown is a plain text format that is designed to be easy to write, and, even more importantly, easy to read" [^1]
* Newer versions of RStudio include a `Visual editor` as well that makes formatting text similar to using a word processor. 


![](../images/visual_editor_quarto.png){fig-align="center"}

[^1]: From Quarto's Markdown Basics webpage, https://quarto.org/docs/authoring/markdown-basics.html

## Formatting text: `Visual editor`  {.smaller}

* Using the `Visual editor` is similar to using a wordprocessor, such as Word
* Keyboard shortcuts usually work as well (_shown for Mac below_)

![](../images/visual_editor_options_expanded_quarto.png){fig-align="center"}


## Formatting text: `Markdown` 

+---------------------------------------------------+---------------------------------------------------+
| Markdown:                                         | Output:                                           |
+===================================================+===================================================+
| ```                                               | *This text is in italics*, but _so is this text_. |
| *This text is in italics*, but _so is this text_. |                                                   |
| ```                                               |                                                   |
+---------------------------------------------------+---------------------------------------------------+
| ```                                               | **Bold** also has __2 options__                   |
| **Bold** also has __2 options__                   |                                                   |
| ```                                               |                                                   |
+---------------------------------------------------+---------------------------------------------------+
| ```                                               | ~~Should this be deleted?~~                       |
| ~~Should this be deleted?~~                       |                                                   |
| ```                                               |                                                   |
+---------------------------------------------------+---------------------------------------------------+
| ```                                               | Need^super^ or~sub~ scripts?                      |
| Need^super^ or~sub~ scripts?                      |                                                   |
| ```                                               |                                                   |
+---------------------------------------------------+---------------------------------------------------+
| ```                                               | `Code is often formatted as verbatim`             |
| `Code is often formatted as verbatim`             |                                                   |
| ```                                               |                                                   |
+---------------------------------------------------+---------------------------------------------------+
| ```                                               | > This is a block quote.                          |
| >This is a block quote.                           |                                                   |
| ```                                               |                                                   |
+---------------------------------------------------+---------------------------------------------------+


<!-- : {tbl-colwidths="\[50,50\]"} -->


## Headers

::: {style="font-size: 85%;"}
* Organize your documents using headers to create sections and subsections
* Use `#` at the beginning of the line to create headers
:::

::: columns
::: {.column width="50%"}
Text in editor:

![](../images/screenshot_headers.png){fig-align="center" height="300"}

:::

::: {.column width="50%"}
Output:

![](../images/screenshot_headers_out.png){fig-align="center" height="300"}

<!-- # Header 1 -->

<!-- ## Header 2 -->

<!-- ### Header 3 -->

<!-- #### Header 4 -->

<!-- ##### Header 5 -->

<!-- ###### Header 6 -->

:::
:::


:::{.callout-important}
Make sure there is no space before the `#`, and there IS a space after the `#`
in order for the header to work properly.
:::



## Outline of headers in RStudio 


* You can easily navigate through your .qmd file if you use headers to outline your text.
* Click on the Outline button below the Run button ![](../images/01_Script_Run.png) to see the outline.

![](../images/default_quarto_html_outline.png){fig-align="center"}

## Unnumbered lists


::: {.columns}
                                        
::: {.column width="50%"}
Text in editor:


<!-- ![](../images/screenshot_unnumbered_lists_code.png){fig-align="center" height="70%"} -->

```qmd
* This is an **unnumbered list**
  + with *sub-items*
      - and *sub-sub-items*,
          - or even deeper.
- You can use characters *, +, and - interchangeably to create lists.
  * The order of the 
      * character types is not important
      + and character types can be repeated.

What *is* important is the *spacing*!

+ indent each 
  * sub-level with a tab and make sure  
  * there is a __space between the character starting the list and the first bit of text__,
  *otherwise the text won't be a new bullet in the list, such as this line.
  
Also, if you do not have an empty line 
+ before starting a list, 
+ then the output will be continuous text 
- instead of bullet points.
```

:::
                                          
::: {.column width="50%"}
::: {style="font-size: 70%;"}
* This is an **unnumbered list**
  + with *sub-items*
      - and *sub-sub-items*,
          - or even deeper.
- You can use characters *, +, and - interchangeably to create lists.
  * The order of the 
      * character types is not important
      + and character types can be repeated.

What *is* important is the **spacing**!

+ indent each 
  * sub-level with a tab and make sure  
  * there is a __space between the character starting the list and the first bit of text__,
  *otherwise the text won't be a new bullet in the list, such as this line.
  
Also, if you do not have an empty line 
+ before starting a list, 
+ then the output will be continuous text 
- instead of bullet points.
:::

:::
:::

## Numbered lists

::: {.columns}
                                       
::: {.column width="60%"}
``` qmd
1. This is a **Numbered list**,
2. which can have
    i. sub
    ii. items
        a. and 
        b. sub-sub-items.
```
:::
                                          
::: {.column width="40%"}
::: {style="font-size: 70%;"}
1. This is a **Numbered list**,
2. which can have
    i. sub
    ii. items
        a. and 
        b. sub-sub-items.
:::
:::
:::

::: {.columns}
                                       
::: {.column width="60%"}
``` qmd
You can also 

1. create numbered lists
1. by repeating 
1. `1.` over and over again.
    i. Each bullet
    i. can start with 
    i. `1.` or `i.` 
        a. or `a.`,
        a. in theory...

When lists get interrupted

1. the numbering restarts 
1. at 1. though.

```
:::
                                          
::: {.column width="40%"}
::: {style="font-size: 70%;"}
You can also 

1. create numbered lists
1. by repeating 
1. `1.` over and over again.
    i. Each bullet
    i. can start with 
    i. `1.` or `i.` 
        a. or `a.`,
        a. in theory...

When lists get interrupted

1. the numbering restarts 
1. at 1. though.
:::
:::
:::



::: {.columns}
                                       
::: {.column width="60%"}
``` qmd
To create a list

(@) whose numbering

does not

(@) get interrupted,
(@) use `(@)`.
```
:::
                                          
::: {.column width="40%"}
::: {style="font-size: 70%;"}
To create a list

(@) whose numbering

does not

(@) get interrupted,
(@) use `(@)`.
:::
:::
:::



## To-do lists

* You can also create _tasks_, or to-do lists, with Quarto.
* Note that you can check off boxes in the slides!

::: {.columns}
                                        
::: {.column width="50%"}
Text in editor:

```qmd
Topics to cover:

- [x] Formatting text
- [x] Headers
- [ ] Lists
    - [x] Unnumbered lists
    - [x] Numbered lists
    - [ ] To-do lists
- [ ] Hyperlinks
- [ ] Images
```
:::
                                          
::: {.column width="50%"}
::: {style="font-size: 85%;"}
Topics to cover:

- [x] Formatting text
- [x] Headers
- [ ] Lists
    - [x] Unnumbered lists
    - [x] Numbered lists
    - [ ] To-do lists
- [ ] Hyperlinks
- [ ] Images
:::
:::
:::

## Practice 

::: {style="font-size: 85%;"}

1.  __Part 1__
    1.  Using the visual editor, practice formatting text in your qmd file, such as making text **bold**, *italicized*, and in `code` format.
    2.  Add 1^st^, 2^nd^, and 3^rd^ level headers
    3.  Add a list with a
        -   sub-list (bullet and/or numbered)
    4.  Add a table
    5.  Add whatever else you are interested in!
2.  __Part 2__
    1.  Switch back to the `Source` editor and examine the markdown code that was used for the formatting.

**Questions**:  _Share in the chat:_

1.  What went smoothly?
2.  What hurdles did you encounter?

:::



## Hyperlinks 

+ __Hyperlink where the url is visible: `<url>`__

```qmd
Workshop website link: <https://ohsu-octri-berd.github.io/Quarto_BERD_2025/>.
```

Workshop website link: <https://ohsu-octri-berd.github.io/Quarto_BERD_2025/>.


+ __Hyperlink showing text instead of the url: `[text](url)`__

```qmd
We also have a shortened [bitly link](https://bit.ly/berd2025_quarto).
```
We also have a shortened [bitly link](https://bit.ly/berd2025_quarto).

+ __Open link in a new tab: `[text](url){target="_blank"}`__

```qmd
This link will open in a new tab  
[bitly link](https://bit.ly/berd2025_quarto){target="_blank"}
```

This link will open in a new tab [bitly link](https://bit.ly/berd2025_quarto){target="_blank"}


## Images (1/2)

Add an image with a simple `![](filepath)`

``` qmd
![](/images/cat_laptop.gif)
```

::::: columns
::: {.column width="30%"}


![](/images/cat_laptop.gif)
:::

::: {.column width="70%"}
::: {style="font-size: 85%;"}
You can add html image options to change the width or height:

Specifying *width* in terms of __pixels__:
``` qmd
![](/images/cat_laptop.gif){width="100"}
```

![](/images/cat_laptop.gif){width="100"}
Specifying *height* in __inches__:
``` qmd
![](/images/cat_laptop.gif){height="2in"}
```

![](/images/cat_laptop.gif){height="2in"}

Specifying *width* as a __percent__ of the original image size:
``` qmd
![](/images/cat_laptop.gif){width="50%"}
```

![](/images/cat_laptop.gif){width="50%"}
:::
:::
:::::

## Images (2/2) 

Add captions, links, and align

-  Add caption text (& align left):

``` qmd
![Caption text](/images/ohsu_logo.jpg){width="100" fig-align="left"}
```

![Caption text](/images/ohsu_logo.jpg){width="100" fig-align="left"}

-  Add caption text that is linked to OHSU webpage (& align center):

``` qmd
![[Caption text with linked url](https://www.ohsu.edu){target="_blank"}]
(/images/ohsu_logo.jpg){width="100" fig-alt="OHSU Logo" fig-align="center"}
```

![[Caption text with linked url](https://www.ohsu.edu){target="_blank"}](/images/ohsu_logo.jpg){width="100" fig-alt="OHSU Logo" fig-align="center"}


-  Logo image itself is linked to OHSU webpage (& align right):

``` qmd
[![](/images/ohsu_logo.jpg){width="100" fig-alt="OHSU Logo"  
fig-align="right"}](https://www.ohsu.edu){target="_blank"}
```

[![](/images/ohsu_logo.jpg){width="100" fig-alt="OHSU Logo" fig-align="right"}](https://www.ohsu.edu){target="_blank"}



## Tabsets
::: {style="font-size: 85%;"}
You can add tabbed content to webpages or slides using the standard Quarto syntax for [tabsets.](https://quarto.org/docs/output-formats/html-basics.html#tabsets){target="_blank"} For example:
::: 


::: {.columns}
                                       
::: {.column width="50%"}
``` qmd
::: {.panel-tabset}
### Tab A

Content for `Tab A`

### Tab B

Content for `Tab B`

### Tab C

Content for `Tab C`
:::
```

:::
                                          
::: {.column width="50%"}

- Each header creates a new tab. 
    - The header level (`#` vs `##` vs `###`, etc.) doesn't matter, but they all have to be the same level to create new tabsets.
    - Here we used `###` level header so that the tabset appears nested within the contents of the slide, which is `##` level.
- See the next slide for the rendered output of the tabset code above.


:::
:::


## Tabsets - Rendered

Below is the rendered output of the tabset code on the previous slide:

::: {.panel-tabset}
### Tab A

Content for `Tab A`

### Tab B

Content for `Tab B`

### Tab C

Content for `Tab C`
:::


## Callout Blocks ⚠️ (1/2)

::::::: columns
::: {.column width="50%"}
``` qmd
::: callout-tip
Callouts are an excellent way to 
draw attention to specific 
pieces of information.
:::

::: {.callout-note}
They are especially useful for 
notes, warnings, or tips.
:::

::: {.callout-important}
You create them using fenced 
divs `:::` with a special class.
:::

```
:::

::::: {.column width="50%"}

::: callout-tip
Callouts are an excellent way to draw attention to specific pieces of information.
:::

::: {.callout-note}
They are especially useful for notes, warnings, or tips.
:::

::: {.callout-important}
You create them using fenced divs `:::` with a special class.
:::

:::::
:::::::



::::::: columns
::: {.column width="50%"}
``` qmd
::: callout-caution
There are 5 types of callouts.
:::

::: callout-warning
It is tempting to overdo it 
with callout boxes!
:::
```
:::

::::: {.column width="50%"}
::: callout-caution
There are 5 types of callouts.
:::

::: callout-warning
It is tempting to overdo it with callout boxes!
:::
:::::
:::::::



## Callout Blocks ⚠️ (2/2)

:::::::: columns
::: {.column width="50%"}
``` qmd
::: {.callout-tip}
## Tip with different title

You can change the title of any 
type of callout box by adding 
`## New title` right below the 
first line of the callout. 
:::

::: {.callout-note icon=false}
You can omit the icon of any type 
of callout box by adding 
`icon=false` within the `{}` of 
the first line of the callout. 
:::
```
:::

:::::: {.column width="50%"}
::: {.callout-tip}
## Tip with different title

You can change the title of any type of callout box by adding `## New title` right below the first line of the callout. 
:::

::: {.callout-note icon=false}
You can omit the icon of any type of callout box by adding `icon=false` within the `{}` of the first line of the callout. 
:::
::::::
::::::::



:::::::: columns
::: {.column width="50%"}
``` qmd
::: {.callout-caution collapse="true"}
## Callouts can be collapsed in 
html files (not in slides - yet)

If you look at the html file 
(not the slides), you will see 
that the content of this callout 
is "folded" and needs to be expanded 
by the user to see it. 
* Use `collapse="true"` if you want it 
collapsed by default, and 
* `collapse="false"` to make it 
expanded by default.
:::
```
:::

:::::: {.column width="50%"}
::: {.callout-caution collapse="true"}
## Callouts can be collapsed in html files (not in slides - yet)

* If you look at the html file (not the slides), you will see that the content of this callout is "folded" and needs to be expanded by the user to see it. 
* Use `collapse="true"` if you want it collapsed by default, and 
* `collapse="false"` to make it expanded by default.
:::
::::::
::::::::

Learn more about callout blocks at <https://quarto.org/docs/authoring/callouts.html>{target="_blank"}


## Tables

One benefit of using or switching over to the Visual editor is that it is much easier to add tables.

::::: columns
::: {.column width="50%"}
``` qmd
| Name    | Date     | Measure |
|---------|----------|---------|
| Jessica | 02/04/25 | 9.3     |
| Meike   | 01/03/25 | 10.1    |
| BERD    |    🐦    | 10.5    |
```
:::

::: {.column width="50%"}
| Name    | Date     | Measure |
|---------|----------|---------|
| Jessica | 02/04/25 | 9.3     |
| Meike   | 01/03/25 | 10.1    |
| BERD    |   🐦     | 10.5    |
:::
:::::

::: {.callout-important}
* When creating tables summarizing data or showing regression output, this is NOT the way to create them.  
* Use code chunks and table options within R to create them instead. 
:::


::: footer
Learn more at [Quarto Docs: Tables](https://quarto.org/docs/authoring/tables.html){target="_blank"}
:::

## Equations with LaTeX

* __Mathematical equations and symbols__ can be included using LaTeX, both as *inline equations* or *centered display equations*

``` qmd
* Use single `$` for inline equations: $y=\beta_0 + \beta_1x + \varepsilon$
```

* Use single `$` for inline equations: $y=\beta_0 + \beta_1x + \varepsilon$

``` qmd
* Use double `$$` for centered display equations:
  
$$\hat{y}= \frac{3}{7} +  5 \textrm{age} + 3^2 \cdot \textrm{height}$$ 
```


* Use double `$$` for centered display equations:
  
$$\hat{y}= \frac{3}{7} +  5 \textrm{age} + 3^2 \cdot \textrm{height}$$ 

::: footer
Learn more at [Markdown Basics: Equations](https://quarto.org/docs/authoring/markdown-basics.html#equations){target="_blank"}
:::




# 3 types of Quarto content: code

- [x] 1. Text, lists, images, tables, links
- [ ] 2. [*Code chunks*]{style="color:darkorange"}
- [ ] 3. YAML metadata 

![[Illustration by Alison Hill and Allison Horst, for RStudio.](https://allisonhorst.com/horst-hill-collaborations)](../images/horst_hedgehog_text_code.png){fig-align="center"}

## Code chunks

::: columns
::: {.column width="50%"}
.qmd file ![](../images/01_qmd_screenshot.png){fig-align="center"}
:::

::: {.column width="50%"}
html output
![](../images/default_quarto_html.png){fig-align="center"}
:::
:::

## What does a code chunk look like?

An empty code chunk looks like this:

`Visual editor`

![](../images/01_qmd_chunk_empty_visual.png)

`Source editor`

![](../images/01_qmd_chunk_empty_source.png)

::: callout-important
Note that a code chunks start with ```` ```{r} ```` and ends with ```` ``` ````. Make sure there is no space before ```` ``` ````.
:::

## Enter and run code (1/2)
::: {style="font-size: 85%;"}

-   **Type R code** inside code chunks
-   **Select code** you want to run, by
    -   placing the cursor in the line of code you want to run,
    -   ***or*** highlighting the code you want to run

::: columns
::: {.column width="50%"}
-   **Run selected code** by
    -   clicking on the ![](../images/01_Script_Run.png) button in the top right corner of the scripting window and choosing `Run Selected Line(s)`,
    -   or typing one of the following key combinations:

|     |                      |
|-----|----------------------|
| Mac | **ctrl + return**    |
| PC  | **command + return** |

-   *Where does the output appear?*
:::

::: {.column width="50%"}
![](../images/01_qmd_coding1a.png){fig-align="center"}
:::
:::

:::

## Enter and run code (2/2)

::: {style="font-size: 80%;"}
-   **Run all code** in a chunk by
    -   by clicking the play button in the top right corner of the chunk
-   The code output appears below the code chunk
:::

![](../images/01_qmd_coding2.png){fig-align="center"}

::: callout-note
-   The output should also appear in the Console.
-   Settings can be changed so that the output appears only in the Console and not below the code chunk:
    -   Select {{< fa solid gear >}} (to right of Render button) and then *Chunk Output in Console*.
:::

## Create a code chunk

::: {style="font-size: 90%;"}
__3 options__ to create a code chunk

1.  Click on ![](../images/code_chunk_insert_icon.png) at top right of the editor window, or

2.  [**Keyboard shortcut**]{style="color:darkorange"}

|     |                        |
|-----|------------------------|
| Mac | *Command + Option + I* |
| PC  | *Ctrl + Alt + I*       |

3.  `Visual editor`: Select `Insert` -\> `Executable Cell` -\> `R`

:::

![](../images/code_chunk_insert_visual.png){fig-align="center" width=70%}


## Useful keyboard shortcuts

[Full list of keyboard shortcuts](https://support.posit.co/hc/en-us/articles/200711853-Keyboard-Shortcuts){target="_blank"}

| action                              | mac                | windows/linux   |
|-------------------------------------|--------------------|-----------------|
| Run code in qmd (or script)         | cmd + enter        | ctrl + enter    |
| `<-`                                | option + -         | alt + -         |
| interrupt currently running command | esc                | esc             |
| keyboard shortcut help              | option + shift + k | alt + shift + k |



**Practice:** Try typing code below in your qmd (with shortcut) and evaluating it (with shortcut):

```{r}
#| eval: false
y <- 5
y
```

## Code chunk options

::: {.panel-tabset}
### `eval`

* __`eval`__ determines whether the R code is __run__ or not. 
* The default is `true`. 
* When set to `false`, the code is not run but still displayed in the output:

::: {.columns}

::: {.column width="50%"}

`#| eval: true`

```{r}
#| echo: fenced
#| eval: true

y <- 1:10
mean(y)
```
:::
                                          
::: {.column width="50%"}

`#| eval: false`
```{r}
#| echo: fenced
#| eval: false

y <- 1:10
mean(y)
```
:::
:::





### `echo`


* __`echo`__ determines whether the R code is __displayed__ or not. 
* The default is `true`. When set to `false`, the code is not displayed in the output but the output is (if `eval` is set to `true`):

::: {.columns}

::: {.column width="50%"}

`#| echo: true`

Code chunk:

![](../images/chunk_option_echo_true.png){fig-align="left"}

Output:

```{r}
#| echo: true

y <- 1:10
mean(y)
```

:::
                                          
::: {.column width="50%"}

`#| echo: false`


Code chunk:

![](../images/chunk_option_echo_false.png){fig-align="left"}

Output:

```{r}
#| echo: false

y <- 1:10
mean(y)
```
:::
:::


### Other options

* `warning`: do you want R's warnings include in your output?
* `message`: do you want R's messages include in your output?

For a complete list of options, see the Quarto reference page for [Code Cells: Knitr](https://quarto.org/docs/reference/cells/cells-knitr.html). In particular the sections on [Code Output](https://quarto.org/docs/reference/cells/cells-knitr.html#code-output) and [Cell Output](https://quarto.org/docs/reference/cells/cells-knitr.html#cell-output).

### Set options globally

* Usually you want most of your document to have the same code chunk options.
* You can set these options in the YAML of the Quarto file (next topic!). 

:::


# 3 types of Quarto content: YAML

- [x] 1. Text, lists, images, tables, links
- [x] 2. Code chunks
- [ ] 3. [*YAML metadata*]{style="color:darkorange"} 

![[Illustration by Alison Hill and Allison Horst, for RStudio.](https://allisonhorst.com/horst-hill-collaborations)](../images/horst_hedgehog_text_code.png){fig-align="center"}


## `YAML` metadata

Many output options can be set in the **YAML metadata**, which is the *first set of code in the file starting and ending with* `---`.

-   It sets the configuration specifications for the output file
-   YAML is an acronym for 
    - *yet another markup language*, or 
    - *YAML ain't markup language*

## Simple `YAML` example 

::: {style="font-size: 70%;"}
* The default YAML includes a **title** and **author** that appear at the top of the output file. In the example below, I also added in a **date** option
:::

::: columns 
::: {.column width="50%"}

YAML:

```{r}
#| echo: true
#| eval: false
---
title: "My first Quarto file"
author: "Meike"
date: "9/25/2023"
format: html
editor: visual
---
```

:::

::: {.column width="50%"}
Output:

![](../images/yaml_simple_output.png){fig-align="center"}
:::
:::

:::{.callout-important}
* The YAML **must** start and end with 3 dashes `---`.
* The first set of `---` **must** be on the very first line.
:::


## Change the output file type {.smaller}

::: columns
::: {.column width="35%"}
* The YAML specifies the format of the output file:
    * html, Word, pdf, slides, website, book, etc.
* This is done by changing the `format:` option 

:::

::: {.column width="65%"}
![[Illustration by Alison Hill and Allison Horst, for RStudio.](https://allisonhorst.com/horst-hill-collaborations)](../images/horst_hedgehog_output_types.png){fig-align="center"}
:::
:::

::: columns
::: {.column width="40%"}

```{r}
#| echo: true
#| eval: false
---
title: "My first Quarto file"
author: "Meike"
date: "9/25/2023"
format: html
editor: visual
---
```

:::

::: {.column width="60%"}
+------------------------+----------------------------------+
| Output format          | YAML                             |
+========================+==================================+
| html                   | `format: html`                   |
+------------------------+----------------------------------+
| Word                   | `format: docx`                   |
+------------------------+----------------------------------+
| pdf[^2]                | `format: pdf`                    |
+------------------------+----------------------------------+
| html slides            | `format: revealjs`               |
+------------------------+----------------------------------+
| PPT slides             | `format: pptx`                   |
+------------------------+----------------------------------+

:::
:::

[^2]:  requires LaTeX installation 



