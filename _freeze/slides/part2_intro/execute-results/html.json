{
  "hash": "47669c81dfe89c792da37aa272292da4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Part 2: Quarto Introduction\"\npagetitle: \"Part 2: Quarto Introduction\"\nsubtitle: \"[OCTRI-BERD Workshop July 2025](https://ohsu-octri-berd.github.io/Quarto_BERD_2025/)\"\nauthor: \"Jessica Minnier, Meike Niederhausen\"\ninstitute: \"OHSU-PSU School of Public Health\"\ndate: \"7/17/25\"\nformat: \n  revealjs:\n      incremental: false\n      scrollable: true\n      chalkboard: true\n      theme: [../sky_modified.scss]\n      width:  1050 #default 1050\n      height: 700 #default 700\n      slide-number: true\n      html-math-method: mathjax\n  # html:\n  #   link-external-newwindow: true\n  #   toc: true\nbibliography: ../references.bib\nexecute:\n  echo: true\n  freeze: auto  # re-render only when source changes\n# editor: visual\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n\n\n\n# Outline\n\n* Create & render a Quarto file \n* 3 types of Quarto content: \n    + *Text editing*\n        - Formatting text; visual editor\n        - Headers\n        - Lists\n        - Hyperlinks\n        - Images\n        - Tabsets\n        - Callout Blocks\n        - Tables\n        - Equations with LaTeX\n    + Code chunks & options\n    + YAML metadata \n\n# Basic Quarto example\n\n![[Artwork from \"Hello, Quarto\" keynote by Julia Lowndes and Mine Çetinkaya-Rundel, presented at RStudio Conference 2022. Illustrated by Allison Horst.](https://allisonhorst.com/cetinkaya-rundel-lowndes-quarto-keynote)](../images/horst_quarto_moon_penguins.png){fig-align=\"center\"}\n\n## 1. Create a Quarto file (`.qmd`)\n\n**Two options:**\n\n1.  click on File $\\rightarrow$ New File $\\rightarrow$ Quarto Document...$\\rightarrow$ OK,\n2.  or in upper left corner of RStudio click on ![](../images/green_plus_create_file.png){width=\"70\"} $\\rightarrow$ ![](../images/select_quarto_option.png){width=\"250\"}\n\n::: columns\n::: {.column width=\"50%\"}\n**Pop-up window selections:**\n\n-   Enter a title and your name\n-   Select `HTML` output format (default)\n-   Engine: select `Knitr`\n-   Editor: Select `Use visual markdown editor`\n-   Click `Create`\n:::\n\n::: {.column width=\"50%\"}\n![](../images/01_qmd_screenshot_popup.png){width=90%}\n:::\n:::\n\n## 2. Create a Quarto file (`.qmd`)\n\n-   After clicking on `Create`, you should then see the following in your editor window:\n\n![](../images/01_qmd_screenshot.png){fig-align=\"center\"}\n\n## 3. Save the Quarto file (`.qmd`)\n\n-   **Save the file** by\n    -   selecting `File -> Save`,\n    -   or clicking on ![](../images/01_Script_Save.png){width=\"33\" height=\"24\"} (towards the left above the scripting window),\n    -   or keyboard shortcut\n        -   PC: *Ctrl + s*\n        -   Mac: *Command + s*\n-   You will need to specify\n    -   a **filename** to save the file as\n        -   ALWAYS use **.qmd** as the filename extension for Quarto files\n    -   the **folder** to save the file in\n\n## 4. Create (render) html file\n\nWe create the html file by **rendering** the .qmd file.\n\n__Two options:__\n\n::: {.columns}\n                                        \n::: {.column width=\"49%\"}\n1.  Click on the Render icon ![](../images/render_icon.png) at the top of the editor window,\n:::\n\n::: {.column width=\"2%\"}\n\n:::\n                                          \n::: {.column width=\"49%\"}\n2.  Or use keyboard shortcuts\n    -   Mac: *Command+Shift+K*\n    -   PC: *Ctrl+Shift+K*\n:::\n                                          \n:::\n\n-   A new window will open with the html output.\n-   You will now see both .qmd and .html files in the folder where you saved the .qmd file.\n\n::: callout-note\n-   The template .qmd file that RStudio creates will render to an html file by default.\n-   The output format can be changed to create a Word doc, pdf, slides, etc.\n:::\n\n## .qmd file vs. its html output\n\n::: columns\n::: {.column width=\"50%\"}\n.qmd file ![](../images/01_qmd_screenshot.png){fig-align=\"center\"}\n:::\n\n::: {.column width=\"50%\"}\nhtml output\\\n![](../images/default_quarto_html.png){fig-align=\"center\"}\n:::\n:::\n\n# Download .qmd file with code from slides\n\nIf you want to run the code in the slides in your own RStudio, we recommend downloading a [qmd file with the code](https://github.com/OHSU-OCTRI-BERD/Quarto_BERD_2025/blob/main/code_files/part2_intro_code.qmd){target=\"_blank\"}.\n\n\n\n\n# 3 types of Quarto content: text\n\n1. [*Text*, lists, images, tables, links]{style=\"color:darkorange\"}\n2. Code chunks\n3. YAML metadata \n\n![[Illustration by Alison Hill and Allison Horst, for RStudio.](https://allisonhorst.com/horst-hill-collaborations)](../images/horst_hedgehog_text_code.png){fig-align=\"center\"}\n\n## Formatting text  \n\n* __bold__, _italics_, super^scripts^ & sub~scripts~, ~~strikethrough~~, `verbatim`, etc. \\\n\\\n\n\n* Text is formatted through a markup language called `Markdown` ([Wikipedia](https://en.wikipedia.org/wiki/Markdown){target=\"_blank\"})\n    * Other markup languages include html (webapges) and LaTeX (math)\n    * All text formatting is specified via *code*\n    * \"Markdown is a plain text format that is designed to be easy to write, and, even more importantly, easy to read\" [^1]\n* Newer versions of RStudio include a `Visual editor` as well that makes formatting text similar to using a word processor. \n\n\n![](../images/visual_editor_quarto.png){fig-align=\"center\"}\n\n[^1]: From Quarto's Markdown Basics webpage, https://quarto.org/docs/authoring/markdown-basics.html\n\n## Formatting text: `Visual editor`  {.smaller}\n\n* Using the `Visual editor` is similar to using a wordprocessor, such as Word\n* Keyboard shortcuts usually work as well (_shown for Mac below_)\n\n![](../images/visual_editor_options_expanded_quarto.png){fig-align=\"center\"}\n\n\n## Formatting text: `Markdown` \n\n+---------------------------------------------------+---------------------------------------------------+\n| Markdown:                                         | Output:                                           |\n+===================================================+===================================================+\n| ```                                               | *This text is in italics*, but _so is this text_. |\n| *This text is in italics*, but _so is this text_. |                                                   |\n| ```                                               |                                                   |\n+---------------------------------------------------+---------------------------------------------------+\n| ```                                               | **Bold** also has __2 options__                   |\n| **Bold** also has __2 options__                   |                                                   |\n| ```                                               |                                                   |\n+---------------------------------------------------+---------------------------------------------------+\n| ```                                               | ~~Should this be deleted?~~                       |\n| ~~Should this be deleted?~~                       |                                                   |\n| ```                                               |                                                   |\n+---------------------------------------------------+---------------------------------------------------+\n| ```                                               | Need^super^ or~sub~ scripts?                      |\n| Need^super^ or~sub~ scripts?                      |                                                   |\n| ```                                               |                                                   |\n+---------------------------------------------------+---------------------------------------------------+\n| ```                                               | `Code is often formatted as verbatim`             |\n| `Code is often formatted as verbatim`             |                                                   |\n| ```                                               |                                                   |\n+---------------------------------------------------+---------------------------------------------------+\n| ```                                               | > This is a block quote.                          |\n| >This is a block quote.                           |                                                   |\n| ```                                               |                                                   |\n+---------------------------------------------------+---------------------------------------------------+\n\n\n<!-- : {tbl-colwidths=\"\\[50,50\\]\"} -->\n\n\n## Headers\n\n::: {style=\"font-size: 85%;\"}\n* Organize your documents using headers to create sections and subsections\n* Use `#` at the beginning of the line to create headers\n:::\n\n::: columns\n::: {.column width=\"50%\"}\nText in editor:\n\n![](../images/screenshot_headers.png){fig-align=\"center\" height=\"300\"}\n\n:::\n\n::: {.column width=\"50%\"}\nOutput:\n\n![](../images/screenshot_headers_out.png){fig-align=\"center\" height=\"300\"}\n\n<!-- # Header 1 -->\n\n<!-- ## Header 2 -->\n\n<!-- ### Header 3 -->\n\n<!-- #### Header 4 -->\n\n<!-- ##### Header 5 -->\n\n<!-- ###### Header 6 -->\n\n:::\n:::\n\n\n:::{.callout-important}\nMake sure there is no space before the `#`, and there IS a space after the `#`\nin order for the header to work properly.\n:::\n\n\n\n## Outline of headers in RStudio \n\n\n* You can easily navigate through your .qmd file if you use headers to outline your text.\n* Click on the Outline button below the Run button ![](../images/01_Script_Run.png) to see the outline.\n\n![](../images/default_quarto_html_outline.png){fig-align=\"center\"}\n\n## Unnumbered lists\n\n\n::: {.columns}\n                                        \n::: {.column width=\"50%\"}\nText in editor:\n\n\n<!-- ![](../images/screenshot_unnumbered_lists_code.png){fig-align=\"center\" height=\"70%\"} -->\n\n```qmd\n* This is an **unnumbered list**\n  + with *sub-items*\n      - and *sub-sub-items*,\n          - or even deeper.\n- You can use characters *, +, and - interchangeably to create lists.\n  * The order of the \n      * character types is not important\n      + and character types can be repeated.\n\nWhat *is* important is the *spacing*!\n\n+ indent each \n  * sub-level with a tab and make sure  \n  * there is a __space between the character starting the list and the first bit of text__,\n  *otherwise the text won't be a new bullet in the list, such as this line.\n  \nAlso, if you do not have an empty line \n+ before starting a list, \n+ then the output will be continuous text \n- instead of bullet points.\n```\n\n:::\n                                          \n::: {.column width=\"50%\"}\n::: {style=\"font-size: 70%;\"}\n* This is an **unnumbered list**\n  + with *sub-items*\n      - and *sub-sub-items*,\n          - or even deeper.\n- You can use characters *, +, and - interchangeably to create lists.\n  * The order of the \n      * character types is not important\n      + and character types can be repeated.\n\nWhat *is* important is the **spacing**!\n\n+ indent each \n  * sub-level with a tab and make sure  \n  * there is a __space between the character starting the list and the first bit of text__,\n  *otherwise the text won't be a new bullet in the list, such as this line.\n  \nAlso, if you do not have an empty line \n+ before starting a list, \n+ then the output will be continuous text \n- instead of bullet points.\n:::\n\n:::\n:::\n\n## Numbered lists\n\n::: {.columns}\n                                       \n::: {.column width=\"60%\"}\n``` qmd\n1. This is a **Numbered list**,\n2. which can have\n    i. sub\n    ii. items\n        a. and \n        b. sub-sub-items.\n```\n:::\n                                          \n::: {.column width=\"40%\"}\n::: {style=\"font-size: 70%;\"}\n1. This is a **Numbered list**,\n2. which can have\n    i. sub\n    ii. items\n        a. and \n        b. sub-sub-items.\n:::\n:::\n:::\n\n::: {.columns}\n                                       \n::: {.column width=\"60%\"}\n``` qmd\nYou can also \n\n1. create numbered lists\n1. by repeating \n1. `1.` over and over again.\n    i. Each bullet\n    i. can start with \n    i. `1.` or `i.` \n        a. or `a.`,\n        a. in theory...\n\nWhen lists get interrupted\n\n1. the numbering restarts \n1. at 1. though.\n\n```\n:::\n                                          \n::: {.column width=\"40%\"}\n::: {style=\"font-size: 70%;\"}\nYou can also \n\n1. create numbered lists\n1. by repeating \n1. `1.` over and over again.\n    i. Each bullet\n    i. can start with \n    i. `1.` or `i.` \n        a. or `a.`,\n        a. in theory...\n\nWhen lists get interrupted\n\n1. the numbering restarts \n1. at 1. though.\n:::\n:::\n:::\n\n\n\n::: {.columns}\n                                       \n::: {.column width=\"60%\"}\n``` qmd\nTo create a list\n\n(@) whose numbering\n\ndoes not\n\n(@) get interrupted,\n(@) use `(@)`.\n```\n:::\n                                          \n::: {.column width=\"40%\"}\n::: {style=\"font-size: 70%;\"}\nTo create a list\n\n(@) whose numbering\n\ndoes not\n\n(@) get interrupted,\n(@) use `(@)`.\n:::\n:::\n:::\n\n\n\n## To-do lists\n\n* You can also create _tasks_, or to-do lists, with Quarto.\n* Note that you can check off boxes in the slides!\n\n::: {.columns}\n                                        \n::: {.column width=\"50%\"}\nText in editor:\n\n```qmd\nTopics to cover:\n\n- [x] Formatting text\n- [x] Headers\n- [ ] Lists\n    - [x] Unnumbered lists\n    - [x] Numbered lists\n    - [ ] To-do lists\n- [ ] Hyperlinks\n- [ ] Images\n```\n:::\n                                          \n::: {.column width=\"50%\"}\n::: {style=\"font-size: 85%;\"}\nTopics to cover:\n\n- [x] Formatting text\n- [x] Headers\n- [ ] Lists\n    - [x] Unnumbered lists\n    - [x] Numbered lists\n    - [ ] To-do lists\n- [ ] Hyperlinks\n- [ ] Images\n:::\n:::\n:::\n\n## Practice \n\n::: {style=\"font-size: 85%;\"}\n\n1.  __Part 1__\n    1.  Using the visual editor, practice formatting text in your qmd file, such as making text **bold**, *italicized*, and in `code` format.\n    2.  Add 1^st^, 2^nd^, and 3^rd^ level headers\n    3.  Add a list with a\n        -   sub-list (bullet and/or numbered)\n    4.  Add a table\n    5.  Add whatever else you are interested in!\n2.  __Part 2__\n    1.  Switch back to the `Source` editor and examine the markdown code that was used for the formatting.\n\n**Questions**:  _Share in the chat:_\n\n1.  What went smoothly?\n2.  What hurdles did you encounter?\n\n:::\n\n\n\n## Hyperlinks \n\n+ __Hyperlink where the url is visible: `<url>`__\n\n```qmd\nWorkshop website link: <https://ohsu-octri-berd.github.io/Quarto_BERD_2025/>.\n```\n\nWorkshop website link: <https://ohsu-octri-berd.github.io/Quarto_BERD_2025/>.\n\n\n+ __Hyperlink showing text instead of the url: `[text](url)`__\n\n```qmd\nWe also have a shortened [bitly link](https://bit.ly/berd2025_quarto).\n```\nWe also have a shortened [bitly link](https://bit.ly/berd2025_quarto).\n\n+ __Open link in a new tab: `[text](url){target=\"_blank\"}`__\n\n```qmd\nThis link will open in a new tab  \n[bitly link](https://bit.ly/berd2025_quarto){target=\"_blank\"}\n```\n\nThis link will open in a new tab [bitly link](https://bit.ly/berd2025_quarto){target=\"_blank\"}\n\n\n## Images (1/2)\n\nAdd an image with a simple `![](filepath)`\n\n``` qmd\n![](/images/cat_laptop.gif)\n```\n\n::::: columns\n::: {.column width=\"30%\"}\n\n\n![](/images/cat_laptop.gif)\n:::\n\n::: {.column width=\"70%\"}\n::: {style=\"font-size: 85%;\"}\nYou can add html image options to change the width or height:\n\nSpecifying *width* in terms of __pixels__:\n``` qmd\n![](/images/cat_laptop.gif){width=\"100\"}\n```\n\n![](/images/cat_laptop.gif){width=\"100\"}\nSpecifying *height* in __inches__:\n``` qmd\n![](/images/cat_laptop.gif){height=\"2in\"}\n```\n\n![](/images/cat_laptop.gif){height=\"2in\"}\n\nSpecifying *width* as a __percent__ of the original image size:\n``` qmd\n![](/images/cat_laptop.gif){width=\"50%\"}\n```\n\n![](/images/cat_laptop.gif){width=\"50%\"}\n:::\n:::\n:::::\n\n## Images (2/2) \n\nAdd captions, links, and align\n\n-  Add caption text (& align left):\n\n``` qmd\n![Caption text](/images/ohsu_logo.jpg){width=\"100\" fig-align=\"left\"}\n```\n\n![Caption text](/images/ohsu_logo.jpg){width=\"100\" fig-align=\"left\"}\n\n-  Add caption text that is linked to OHSU webpage (& align center):\n\n``` qmd\n![[Caption text with linked url](https://www.ohsu.edu){target=\"_blank\"}]\n(/images/ohsu_logo.jpg){width=\"100\" fig-alt=\"OHSU Logo\" fig-align=\"center\"}\n```\n\n![[Caption text with linked url](https://www.ohsu.edu){target=\"_blank\"}](/images/ohsu_logo.jpg){width=\"100\" fig-alt=\"OHSU Logo\" fig-align=\"center\"}\n\n\n-  Logo image itself is linked to OHSU webpage (& align right):\n\n``` qmd\n[![](/images/ohsu_logo.jpg){width=\"100\" fig-alt=\"OHSU Logo\"  \nfig-align=\"right\"}](https://www.ohsu.edu){target=\"_blank\"}\n```\n\n[![](/images/ohsu_logo.jpg){width=\"100\" fig-alt=\"OHSU Logo\" fig-align=\"right\"}](https://www.ohsu.edu){target=\"_blank\"}\n\n\n\n## Tabsets\n::: {style=\"font-size: 85%;\"}\nYou can add tabbed content to webpages or slides using the standard Quarto syntax for [tabsets.](https://quarto.org/docs/output-formats/html-basics.html#tabsets){target=\"_blank\"} For example:\n::: \n\n\n::: {.columns}\n                                       \n::: {.column width=\"50%\"}\n``` qmd\n::: {.panel-tabset}\n### Tab A\n\nContent for `Tab A`\n\n### Tab B\n\nContent for `Tab B`\n\n### Tab C\n\nContent for `Tab C`\n:::\n```\n\n:::\n                                          \n::: {.column width=\"50%\"}\n\n- Each header creates a new tab. \n    - The header level (`#` vs `##` vs `###`, etc.) doesn't matter, but they all have to be the same level to create new tabsets.\n    - Here we used `###` level header so that the tabset appears nested within the contents of the slide, which is `##` level.\n- See the next slide for the rendered output of the tabset code above.\n\n\n:::\n:::\n\n\n## Tabsets - Rendered\n\nBelow is the rendered output of the tabset code on the previous slide:\n\n::: {.panel-tabset}\n### Tab A\n\nContent for `Tab A`\n\n### Tab B\n\nContent for `Tab B`\n\n### Tab C\n\nContent for `Tab C`\n:::\n\n\n## Callout Blocks ⚠️ (1/2)\n\n::::::: columns\n::: {.column width=\"50%\"}\n``` qmd\n::: callout-tip\nCallouts are an excellent way to \ndraw attention to specific \npieces of information.\n:::\n\n::: {.callout-note}\nThey are especially useful for \nnotes, warnings, or tips.\n:::\n\n::: {.callout-important}\nYou create them using fenced \ndivs `:::` with a special class.\n:::\n\n```\n:::\n\n::::: {.column width=\"50%\"}\n\n::: callout-tip\nCallouts are an excellent way to draw attention to specific pieces of information.\n:::\n\n::: {.callout-note}\nThey are especially useful for notes, warnings, or tips.\n:::\n\n::: {.callout-important}\nYou create them using fenced divs `:::` with a special class.\n:::\n\n:::::\n:::::::\n\n\n\n::::::: columns\n::: {.column width=\"50%\"}\n``` qmd\n::: callout-caution\nThere are 5 types of callouts.\n:::\n\n::: callout-warning\nIt is tempting to overdo it \nwith callout boxes!\n:::\n```\n:::\n\n::::: {.column width=\"50%\"}\n::: callout-caution\nThere are 5 types of callouts.\n:::\n\n::: callout-warning\nIt is tempting to overdo it with callout boxes!\n:::\n:::::\n:::::::\n\n\n\n## Callout Blocks ⚠️ (2/2)\n\n:::::::: columns\n::: {.column width=\"50%\"}\n``` qmd\n::: {.callout-tip}\n## Tip with different title\n\nYou can change the title of any \ntype of callout box by adding \n`## New title` right below the \nfirst line of the callout. \n:::\n\n::: {.callout-note icon=false}\nYou can omit the icon of any type \nof callout box by adding \n`icon=false` within the `{}` of \nthe first line of the callout. \n:::\n```\n:::\n\n:::::: {.column width=\"50%\"}\n::: {.callout-tip}\n## Tip with different title\n\nYou can change the title of any type of callout box by adding `## New title` right below the first line of the callout. \n:::\n\n::: {.callout-note icon=false}\nYou can omit the icon of any type of callout box by adding `icon=false` within the `{}` of the first line of the callout. \n:::\n::::::\n::::::::\n\n\n\n:::::::: columns\n::: {.column width=\"50%\"}\n``` qmd\n::: {.callout-caution collapse=\"true\"}\n## Callouts can be collapsed in \nhtml files (not in slides - yet)\n\nIf you look at the html file \n(not the slides), you will see \nthat the content of this callout \nis \"folded\" and needs to be expanded \nby the user to see it. \n* Use `collapse=\"true\"` if you want it \ncollapsed by default, and \n* `collapse=\"false\"` to make it \nexpanded by default.\n:::\n```\n:::\n\n:::::: {.column width=\"50%\"}\n::: {.callout-caution collapse=\"true\"}\n## Callouts can be collapsed in html files (not in slides - yet)\n\n* If you look at the html file (not the slides), you will see that the content of this callout is \"folded\" and needs to be expanded by the user to see it. \n* Use `collapse=\"true\"` if you want it collapsed by default, and \n* `collapse=\"false\"` to make it expanded by default.\n:::\n::::::\n::::::::\n\nLearn more about callout blocks at <https://quarto.org/docs/authoring/callouts.html>{target=\"_blank\"}\n\n\n## Tables\n\nOne benefit of using or switching over to the Visual editor is that it is much easier to add tables.\n\n::::: columns\n::: {.column width=\"50%\"}\n``` qmd\n| Name    | Date     | Measure |\n|---------|----------|---------|\n| Jessica | 02/04/25 | 9.3     |\n| Meike   | 01/03/25 | 10.1    |\n| BERD    |    🐦    | 10.5    |\n```\n:::\n\n::: {.column width=\"50%\"}\n| Name    | Date     | Measure |\n|---------|----------|---------|\n| Jessica | 02/04/25 | 9.3     |\n| Meike   | 01/03/25 | 10.1    |\n| BERD    |   🐦     | 10.5    |\n:::\n:::::\n\n::: {.callout-important}\n* When creating tables summarizing data or showing regression output, this is NOT the way to create them.  \n* Use code chunks and table options within R to create them instead. \n:::\n\n\n::: footer\nLearn more at [Quarto Docs: Tables](https://quarto.org/docs/authoring/tables.html){target=\"_blank\"}\n:::\n\n## Equations with LaTeX\n\n* __Mathematical equations and symbols__ can be included using LaTeX, both as *inline equations* or *centered display equations*\n\n``` qmd\n* Use single `$` for inline equations: $y=\\beta_0 + \\beta_1x + \\varepsilon$\n```\n\n* Use single `$` for inline equations: $y=\\beta_0 + \\beta_1x + \\varepsilon$\n\n``` qmd\n* Use double `$$` for centered display equations:\n  \n$$\\hat{y}= \\frac{3}{7} +  5 \\textrm{age} + 3^2 \\cdot \\textrm{height}$$ \n```\n\n\n* Use double `$$` for centered display equations:\n  \n$$\\hat{y}= \\frac{3}{7} +  5 \\textrm{age} + 3^2 \\cdot \\textrm{height}$$ \n\n::: footer\nLearn more at [Markdown Basics: Equations](https://quarto.org/docs/authoring/markdown-basics.html#equations){target=\"_blank\"}\n:::\n\n\n\n\n# 3 types of Quarto content: code\n\n- [x] 1. Text, lists, images, tables, links\n- [ ] 2. [*Code chunks*]{style=\"color:darkorange\"}\n- [ ] 3. YAML metadata \n\n![[Illustration by Alison Hill and Allison Horst, for RStudio.](https://allisonhorst.com/horst-hill-collaborations)](../images/horst_hedgehog_text_code.png){fig-align=\"center\"}\n\n## Code chunks\n\n::: columns\n::: {.column width=\"50%\"}\n.qmd file ![](../images/01_qmd_screenshot.png){fig-align=\"center\"}\n:::\n\n::: {.column width=\"50%\"}\nhtml output\n![](../images/default_quarto_html.png){fig-align=\"center\"}\n:::\n:::\n\n## What does a code chunk look like?\n\nAn empty code chunk looks like this:\n\n`Visual editor`\n\n![](../images/01_qmd_chunk_empty_visual.png)\n\n`Source editor`\n\n![](../images/01_qmd_chunk_empty_source.png)\n\n::: callout-important\nNote that a code chunks start with ```` ```{r} ```` and ends with ```` ``` ````. Make sure there is no space before ```` ``` ````.\n:::\n\n## Enter and run code (1/2)\n::: {style=\"font-size: 85%;\"}\n\n-   **Type R code** inside code chunks\n-   **Select code** you want to run, by\n    -   placing the cursor in the line of code you want to run,\n    -   ***or*** highlighting the code you want to run\n\n::: columns\n::: {.column width=\"50%\"}\n-   **Run selected code** by\n    -   clicking on the ![](../images/01_Script_Run.png) button in the top right corner of the scripting window and choosing `Run Selected Line(s)`,\n    -   or typing one of the following key combinations:\n\n|     |                      |\n|-----|----------------------|\n| Mac | **ctrl + return**    |\n| PC  | **command + return** |\n\n-   *Where does the output appear?*\n:::\n\n::: {.column width=\"50%\"}\n![](../images/01_qmd_coding1a.png){fig-align=\"center\"}\n:::\n:::\n\n:::\n\n## Enter and run code (2/2)\n\n::: {style=\"font-size: 80%;\"}\n-   **Run all code** in a chunk by\n    -   by clicking the play button in the top right corner of the chunk\n-   The code output appears below the code chunk\n:::\n\n![](../images/01_qmd_coding2.png){fig-align=\"center\"}\n\n::: callout-note\n-   The output should also appear in the Console.\n-   Settings can be changed so that the output appears only in the Console and not below the code chunk:\n    -   Select {{< fa solid gear >}} (to right of Render button) and then *Chunk Output in Console*.\n:::\n\n## Create a code chunk\n\n::: {style=\"font-size: 90%;\"}\n__3 options__ to create a code chunk\n\n1.  Click on ![](../images/code_chunk_insert_icon.png) at top right of the editor window, or\n\n2.  [**Keyboard shortcut**]{style=\"color:darkorange\"}\n\n|     |                        |\n|-----|------------------------|\n| Mac | *Command + Option + I* |\n| PC  | *Ctrl + Alt + I*       |\n\n3.  `Visual editor`: Select `Insert` -\\> `Executable Cell` -\\> `R`\n\n:::\n\n![](../images/code_chunk_insert_visual.png){fig-align=\"center\" width=70%}\n\n\n## Useful keyboard shortcuts\n\n[Full list of keyboard shortcuts](https://support.posit.co/hc/en-us/articles/200711853-Keyboard-Shortcuts){target=\"_blank\"}\n\n| action                              | mac                | windows/linux   |\n|-------------------------------------|--------------------|-----------------|\n| Run code in qmd (or script)         | cmd + enter        | ctrl + enter    |\n| `<-`                                | option + -         | alt + -         |\n| interrupt currently running command | esc                | esc             |\n| keyboard shortcut help              | option + shift + k | alt + shift + k |\n\n\n\n**Practice:** Try typing code below in your qmd (with shortcut) and evaluating it (with shortcut):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- 5\ny\n```\n:::\n\n\n\n\n## Code chunk options\n\n::: {.panel-tabset}\n### `eval`\n\n* __`eval`__ determines whether the R code is __run__ or not. \n* The default is `true`. \n* When set to `false`, the code is not run but still displayed in the output:\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n\n`#| eval: true`\n\n\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| eval: true\n\ny <- 1:10\nmean(y)\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5.5\n```\n\n\n:::\n:::\n\n\n\n:::\n                                          \n::: {.column width=\"50%\"}\n\n`#| eval: false`\n\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| eval: false\n\ny <- 1:10\nmean(y)\n```\n````\n:::\n\n\n\n:::\n:::\n\n\n\n\n\n### `echo`\n\n\n* __`echo`__ determines whether the R code is __displayed__ or not. \n* The default is `true`. When set to `false`, the code is not displayed in the output but the output is (if `eval` is set to `true`):\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n\n`#| echo: true`\n\nCode chunk:\n\n![](../images/chunk_option_echo_true.png){fig-align=\"left\"}\n\nOutput:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- 1:10\nmean(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5.5\n```\n\n\n:::\n:::\n\n\n\n\n:::\n                                          \n::: {.column width=\"50%\"}\n\n`#| echo: false`\n\n\nCode chunk:\n\n![](../images/chunk_option_echo_false.png){fig-align=\"left\"}\n\nOutput:\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5.5\n```\n\n\n:::\n:::\n\n\n\n:::\n:::\n\n\n### Other options\n\n* `warning`: do you want R's warnings include in your output?\n* `message`: do you want R's messages include in your output?\n\nFor a complete list of options, see the Quarto reference page for [Code Cells: Knitr](https://quarto.org/docs/reference/cells/cells-knitr.html). In particular the sections on [Code Output](https://quarto.org/docs/reference/cells/cells-knitr.html#code-output) and [Cell Output](https://quarto.org/docs/reference/cells/cells-knitr.html#cell-output).\n\n### Set options globally\n\n* Usually you want most of your document to have the same code chunk options.\n* You can set these options in the YAML of the Quarto file (next topic!). \n\n:::\n\n\n# 3 types of Quarto content: YAML\n\n- [x] 1. Text, lists, images, tables, links\n- [x] 2. Code chunks\n- [ ] 3. [*YAML metadata*]{style=\"color:darkorange\"} \n\n![[Illustration by Alison Hill and Allison Horst, for RStudio.](https://allisonhorst.com/horst-hill-collaborations)](../images/horst_hedgehog_text_code.png){fig-align=\"center\"}\n\n\n## `YAML` metadata\n\nMany output options can be set in the **YAML metadata**, which is the *first set of code in the file starting and ending with* `---`.\n\n-   It sets the configuration specifications for the output file\n-   YAML is an acronym for \n    - *yet another markup language*, or \n    - *YAML ain't markup language*\n\n## Simple `YAML` example \n\n::: {style=\"font-size: 70%;\"}\n* The default YAML includes a **title** and **author** that appear at the top of the output file. In the example below, I also added in a **date** option\n:::\n\n::: columns \n::: {.column width=\"50%\"}\n\nYAML:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n---\ntitle: \"My first Quarto file\"\nauthor: \"Meike\"\ndate: \"9/25/2023\"\nformat: html\neditor: visual\n---\n```\n:::\n\n\n\n\n:::\n\n::: {.column width=\"50%\"}\nOutput:\n\n![](../images/yaml_simple_output.png){fig-align=\"center\"}\n:::\n:::\n\n:::{.callout-important}\n* The YAML **must** start and end with 3 dashes `---`.\n* The first set of `---` **must** be on the very first line.\n:::\n\n\n## Change the output file type {.smaller}\n\n::: columns\n::: {.column width=\"35%\"}\n* The YAML specifies the format of the output file:\n    * html, Word, pdf, slides, website, book, etc.\n* This is done by changing the `format:` option \n\n:::\n\n::: {.column width=\"65%\"}\n![[Illustration by Alison Hill and Allison Horst, for RStudio.](https://allisonhorst.com/horst-hill-collaborations)](../images/horst_hedgehog_output_types.png){fig-align=\"center\"}\n:::\n:::\n\n::: columns\n::: {.column width=\"40%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n---\ntitle: \"My first Quarto file\"\nauthor: \"Meike\"\ndate: \"9/25/2023\"\nformat: html\neditor: visual\n---\n```\n:::\n\n\n\n\n:::\n\n::: {.column width=\"60%\"}\n+------------------------+----------------------------------+\n| Output format          | YAML                             |\n+========================+==================================+\n| html                   | `format: html`                   |\n+------------------------+----------------------------------+\n| Word                   | `format: docx`                   |\n+------------------------+----------------------------------+\n| pdf[^2]                | `format: pdf`                    |\n+------------------------+----------------------------------+\n| html slides            | `format: revealjs`               |\n+------------------------+----------------------------------+\n| PPT slides             | `format: pptx`                   |\n+------------------------+----------------------------------+\n\n:::\n:::\n\n[^2]:  requires LaTeX installation \n\n\n## Practice\n\n* Change the format of the qmd file to __revealjs__ and render the file.\n    * How do the slides look?\n    * What in the code determines when a new slide is created?\n\n* Change the format of the qmd file to __pptx__ and render the file.  \n    * How do the slides look? Which styling options worked and which did not?\n    * What in the code determines when a new slide is created?\n\n* Change the format of the qmd file to __docx__ and render the file.  \n    * How does the Word doc look? Which styling options worked and which did not?\n\n## YAML customizations\n\n* Below are some YAML options to customize your html file.  \n* Download from GitHub the file [part2_intro_code_yaml_extra.qmd](https://github.com/OHSU-OCTRI-BERD/Quarto_BERD_2025/blob/main/code_files/part2_intro_code_yaml_extra.qmd){target=\"_blank\"} to render it on your computer.\n    * You can view the [rendered version](https://ohsu-octri-berd.github.io/Quarto_BERD_2025/code_files/part2_intro_code_yaml_extra.html) online. *This will look different from on your computer though since the workshop's website's setting are being applied to it. *\n* Learn about many more YAML options from Quarto's [HTML Options page](https://quarto.org/docs/reference/formats/html.html){target=\"_blank\"}.\n\n```\n---\ntitle: \"Part 2: Quarto Introduction\"\npagetitle: \"Part 2: Quarto Introduction\"\nsubtitle: \"OCTRI-BERD Workshop July 2025\"\nauthor: \"Jessica Minnier, Meike Niederhausen\"\ninstitute: \"OHSU-PSU School of Public Health\"\ndate: \"7/17/25\"\nformat:\n  html:\n    link-external-newwindow: true  # open links in a new tab\n    toc: true                      # create a table of contents\n    number-sections: true         # numbers header sections\n    embed-resources: true          # IMPORTANT! Creates a standalone html file that other can view without needing additional files.\n    code-fold: show                # true collapses all code chunks; show shows the code\n    code-tools: true               # creates menu at top of html to toggle code folding\nexecute:\n  echo: true                      # show all code in code chunks\n  eval: true                      # run all code in code chunks \neditor: source                    # other options is visual\n# editor_options: \n#   chunk_output_type: console      # Code output shown in console instead of inline\n---\n```\n\n<br>\n\n<iframe width=\"900\" height=\"700\" src=\"https://ohsu-octri-berd.github.io/Quarto_BERD_2025/code_files/part2_intro_code_yaml_extra.html\">\n\n</iframe>",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}